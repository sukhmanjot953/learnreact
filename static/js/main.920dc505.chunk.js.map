{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","Components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","Link","to","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","link","href","aria-labelledby","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","placeholder","value","onChange","event","console","log","target","showAlert","rows","style","backgroundColor","color","n","wordsArray","split","uniqueWords","Set","size","length","About","mystyle","setMystyle","_useState3","_useState4","btntext","setBtnText","data-bs-parent","App","setMode","setAlert","message","setTimeout","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.920dc505.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nAlert.propTypes = {\r\n  alert: PropTypes.shape({\r\n    type: PropTypes.string.isRequired,\r\n    msg: PropTypes.string.isRequired,\r\n  }),\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom'; // Import Link from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* Use Link component for navigation */}\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* Use Link component for navigation */}\r\n                <Link className=\"nav-link active\" to=\"/Home\" aria-current=\"page\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* Use Link component for navigation */}\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* Add the link to your other page/component */}\r\n                <Link className=\"nav-link\" to=\"/otherpage\">\r\n                  {props.link}\r\n                </Link>\r\n              </li>\r\n              {/* Dropdown Menu */}\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  href=\"#\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-bs-toggle=\"dropdown\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href=\"#\">\r\n                      Action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href=\"#\">\r\n                      Another action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href=\"#\">\r\n                      Something else here\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                onClick={props.toggleMode}\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckChecked\"\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">\r\n                Dark mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  mode: PropTypes.string.isRequired,\r\n  toggleMode: PropTypes.func.isRequired,\r\n  link: PropTypes.string.isRequired, // Add prop type for the link\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState('');\r\n  const handleUpClick = () => {\r\n    console.log(\"uppercase was clicked\");\r\n    let n = text.toUpperCase();\r\n    setText(n);\r\n    props.showAlert(\"converted to uppercase!\", \"success\");\r\n  }\r\n  \r\n  const handleLoClick = () => {\r\n    console.log(\"lowercase was clicked\");\r\n    let n = text.toLowerCase();\r\n    setText(n);\r\n    props.showAlert(\"converted to lowercase!\", \"success\");\r\n  }\r\n  \r\n  const countDifferentWords = () => {\r\n    const wordsArray = text.split(/\\s+/);\r\n    const uniqueWords = new Set(wordsArray);\r\n    console.log(\"Unique Words:\", uniqueWords.size);\r\n    props.showAlert(\"counted Words!\", \"success\");\r\n  }\r\n  \r\n  const handleUpChange = (event) => {\r\n    console.log(\"on change\");\r\n    setText(event.target.value);\r\n    props.showAlert(\"Hurray!! \", \"success\");\r\n  }\r\n  return (\r\n    <>\r\n      <div className='container'>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            placeholder=\"Enter text here\"\r\n            value={text}\r\n            onChange={handleUpChange}\r\n            id=\"Mybox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          className=\"btn mx-1\"\r\n          style={{\r\n            backgroundColor: 'blue',\r\n            color: \"white\"\r\n          }}\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to uppercase\r\n        </button>\r\n        <button\r\n          className=\"btn mx-2\"\r\n          style={{\r\n            backgroundColor: 'blue',\r\n            color: \"white\"\r\n          }}\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to lowercase\r\n        </button>\r\n        <button\r\n          className=\"btn mx-2\"\r\n          style={{\r\n            backgroundColor: 'blue',\r\n            color: \"white\"\r\n          }}\r\n          onClick={countDifferentWords}\r\n        >\r\n          No. of different words\r\n        </button>\r\n      </div>\r\n      <div className='container my-3'>\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(/\\s+/).length} words and {text.length} characters</p>\r\n        <p>{0.08 * text.split(/\\s+/).length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function About() {\r\n  // Initialize the state variables correctly\r\n  const [mystyle, setMystyle] = useState({\r\n    backgroundColor: 'black',\r\n    color: 'white',\r\n  });\r\n\r\n  const [btntext, setBtnText] = useState('Enable dark mode');\r\n\r\n  const Togglestyle = () => {\r\n    // Check the current background color to toggle between light and dark modes\r\n    if (mystyle.backgroundColor === 'white') {\r\n      setMystyle({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n      });\r\n      setBtnText('Enable light mode');\r\n    } else {\r\n      setMystyle({\r\n        color: 'white',\r\n        backgroundColor: 'black',\r\n      });\r\n      setBtnText('Enable dark mode');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={mystyle}>\r\n        <div className='my-3'>\r\n          <h2>About us</h2>\r\n        </div>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n      <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\">\r\n      <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n          <button onClick={Togglestyle} type=\"button\" className=\"btn btn-primary\">\r\n            {btntext}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// import React, { useState } from 'react'; // Import React and useState\n// import './App.css';\n// import Alert from './Components/Alert';\n// import Navbar from './Components/Navbar';\n// import TextForm from './Components/TextForm';\n// import About from './Components/About';\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// function App() {\n//   const [mode, setMode] = useState('dark');\n//   const [alert, setAlert] = useState(null);\n\n//   const showAlert = (message, type) => {\n//     setAlert({\n//       msg: message,\n//       type: type, \n//     });\n//     setTimeout(() => {\n//       setAlert(null);\n//     }, 1500);\n//   }\n\n//   const toggleMode = () => {\n//     if (mode === 'light') {\n//       setMode('dark');\n//       showAlert('Dark mode has been enabled', \"success\");\n//     } else {\n//       setMode('light');\n//       showAlert('Light mode has been enabled', \"success\");\n//     }\n//   }\n\n//   return (\n//     <Router>\n//       <Navbar title=\"Testutils\" mode={mode} toggleMode={toggleMode} />\n//       <Alert alert={alert} />\n//       <div className='container my-3'>\n//         <Switch>\n//           <Route path=\"/about\">\n//             <About />\n//           </Route>\n//           <Route path=\"/users\">\n//             <TextForm showAlert={showAlert} heading=\"Enter the text\" />\n//           </Route>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport About from './Components/About';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('dark');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      showAlert('Dark mode has been enabled', \"success\");\n    } else {\n      setMode('light');\n      showAlert('Light mode has been enabled', \"success\");\n    }\n  }\n\n  return (\n    <Router>\n      <Navbar title=\"Testutils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className='container my-3'>\n        <Routes>\n          <Route path=\"/About\" element={<About />} />\n          <Route path=\"/Home\" element={<TextForm showAlert={showAlert} heading=\"Enter the text\"/>} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n// showAlert={showAlert} heading=\"Enter the text\" ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}